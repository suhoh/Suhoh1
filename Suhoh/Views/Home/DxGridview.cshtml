@using Suhoh.Model
@model ViewModel

@using System.Data

@functions {
    void SetGroupPanelVisibility(MVCxGridView grid, bool visible)
    {
        grid.Settings.ShowGroupPanel = visible;
    }
}

@Html.DevExpress().GridView(
    settings =>
    {
        settings.Name = Model.CreatePanelName;  // "dxGridview";
        settings.CallbackRouteValues = new { Controller = "Home", Action = "DxGridview", EnableCheckedListMode = true };
        settings.ClientSideEvents.Init = "dxGridview_Init";
        settings.ClientSideEvents.BeginCallback = "dxGridview_OnBeginCallback";
        settings.ClientSideEvents.EndCallback = "dxGridview_OnEndCallback";

        settings.KeyFieldName = "Applicant";   // TODO: need to have unique column here
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        settings.Height = System.Web.UI.WebControls.Unit.Percentage(100);
        settings.ControlStyle.CssClass = "dxGridview";
        settings.Styles.Header.Paddings.Padding = 3;

        // Columns
        settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.Control;
        settings.SettingsResizing.Visualization = ResizingMode.Live;
        settings.SettingsBehavior.AllowEllipsisInText = true;

        if (Model.DxGridview != null)
        {
            foreach (DataColumn c in Model.DxGridview.Columns)
            {
                settings.Columns.Add(column =>
                {
                    if (c.DataType.Name == "DateTime")
                        column.PropertiesEdit.DisplayFormatString = "yyyy/MM/dd";
                    column.FieldName = c.ColumnName;
                    column.ToolTip = c.ColumnName;
                });
            }
        }

        // check box
        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.ShowClearFilterButton = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        // Header filter
        settings.Settings.ShowHeaderFilterButton = Model.IsHeaderFilter;
        settings.SettingsPopup.HeaderFilter.Height = 200;
        settings.SettingsPopup.HeaderFilter.SettingsAdaptivity.MinHeight = 300;
        foreach (GridViewDataColumn column in settings.Columns)
            column.SettingsHeaderFilter.Mode = GridHeaderFilterMode.CheckedList;

        // Grouping
        //settings.Settings.ShowGroupPanel = Model.IsGrouping;
        settings.SettingsBehavior.AllowGroup = true;
        settings.SettingsBehavior.AllowSort = true;

        // Shrink page button
        settings.SettingsPager.EnableAdaptivity = true;

        // Scrollbar
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
        //settings.Settings.VerticalScrollableHeight = 100;   // will be set from client

        // Scrollbar
        //settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;

        // Focus row
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.Styles.FocusedRow.BackColor = System.Drawing.Color.FromArgb(113, 57, 143);

        // Alternating color
        settings.Styles.AlternatingRow.BackColor = System.Drawing.Color.FromArgb(248, 243, 250);
        settings.Styles.AlternatingRow.Enabled = DefaultBoolean.True;

        // Gridlines - depends on theme
        settings.Settings.GridLines = GridLines.Both;

        // page size
        settings.SettingsPager.PageSize = Convert.ToInt16(Model.GridviewPageSize);

        // Paging
        //settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
        settings.SettingsPager.Position = PagerPosition.Bottom;
        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.LastPageButton.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.EnableAdaptivity = true;

        // Had to create internal function instead of Callback from client
        // https://github.com/DevExpress-Examples/gridview-how-to-toggle-auto-filter-row-visibility-e4882/blob/14.1.7%2B/CS/E4882/Views/Home/GridViewPartial.cshtml
        settings.PreRender = (s, e) =>
        {
            SetGroupPanelVisibility(s as MVCxGridView, Model.IsGrouping);
        };
        settings.BeforeGetCallbackResult = (s, e) =>
        {
            SetGroupPanelVisibility(s as MVCxGridView, Model.IsGrouping);
        };

        // Store filter and filtered rows
        settings.BeforeGetCallbackResult += (s, e) =>
        {
            var grid = s as MVCxGridView;
            var filter = grid.FilterExpression;
            if (!String.IsNullOrEmpty(filter))
            {
                var keys = "";
                for (int i = 0; i < grid.VisibleRowCount; i++)
                {
                    var key = grid.GetRowValues(i, grid.KeyFieldName).ToString();
                    keys += key + "|";
                }
                //store keys here to obtain only filtered rows from your model  
                //store the fitler expressin here
            }
        };

    }).Bind(Model.DxGridview).GetHtml()