@using Suhoh.Model
@using System.Drawing
@model ViewModel

@{
    ViewBag.Title = "Home";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*Add new pane*@
<div>
    @Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "popupAddNewPane";
            settings.Width = 250;
            settings.Height = 350;
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.CloseButton;
            settings.CloseOnEscape = true;
            settings.PopupAnimationType = AnimationType.None;
            settings.HeaderText = "Add new pane";

            settings.ShowPinButton = true;
            settings.ShowCloseButton = true;
            settings.ShowCollapseButton = true;

            settings.Modal = false;

            settings.PopupAnimationType = AnimationType.Slide;

            settings.ResizingMode = ResizingMode.Live;
            settings.AllowResize = true;
            settings.ShowSizeGrip = ShowSizeGrip.True;
            settings.ShowFooter = false;

            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
            settings.SetContent(() =>
            {
                Html.RenderPartial("AddNewPane", Model);
            });

            //settings.ClientSideEvents.BeforeResizing = "function(s,e){ MainGridView.SetHeight(1); pageControlGrid.SetVisible(false); }";
            //settings.ClientSideEvents.AfterResizing = "function(s, e){ pageControlGrid.SetVisible(true); MainGridView.SetHeight(document.getElementById('containerDiv').clientHeight);}";

            settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer('popupAddNewPane', '', true); $('#' + _activePropertyName).removeClass('btnPropertyBorder'); }";
        }).GetHtml()
</div>

@*Property popup*@
<div>
    @Html.DevExpress().PopupControl(
    settings =>
    {
        settings.Name = "popupPanelProperty";
        settings.Width = 250;
        settings.Height = 370;
        settings.AllowDragging = true;
        settings.CloseAction = CloseAction.CloseButton;
        settings.CloseOnEscape = true;
        settings.PopupAnimationType = AnimationType.None;
        settings.HeaderText = "Property";


        settings.ShowPinButton = true;
        settings.ShowCloseButton = true;
        settings.ShowCollapseButton = true;

        settings.Modal = false;

        settings.PopupAnimationType = AnimationType.Slide;

        settings.ResizingMode = ResizingMode.Live;
        settings.AllowResize = false;
        settings.ShowSizeGrip = ShowSizeGrip.True;
        settings.ShowFooter = false;

        settings.EnableClientSideAPI = true;

        settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
        settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
        settings.SetContent(() =>
        {
            Html.RenderPartial("CallbackPopupPanelProperty", Model);
        });

        //settings.ClientSideEvents.BeforeResizing = "function(s,e){ MainGridView.SetHeight(1); pageControlGrid.SetVisible(false); }";
        //settings.ClientSideEvents.AfterResizing = "function(s, e){ pageControlGrid.SetVisible(true); MainGridView.SetHeight(document.getElementById('containerDiv').clientHeight);}";

        settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer('popupPanelProperty', '', true); $('#' + _activePropertyName).removeClass('btnPropertyBorder'); }";
    }).GetHtml()

</div>

@*Message Popup*@
<div>
    @Html.DevExpress().PopupControl(
    settings =>
    {
        settings.Name = "pcErrorModalDialog";
        settings.Width = 260;
        settings.MaxWidth = 350;
        settings.AllowDragging = true;
        settings.CloseAction = CloseAction.CloseButton;
        settings.CloseOnEscape = true;
        settings.PopupAnimationType = AnimationType.None;
        settings.HeaderText = "Message";
        settings.ControlStyle.CssClass = "popupMessage";
        settings.Modal = true;
        settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
        settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;

        //settings.Styles.Header.BackColor = Color.FromArgb(0xFCFADD);

        settings.SetContent(() =>
        {
            using (Html.BeginForm("ErrorModalView", "Home", FormMethod.Post, new { id = "errorForm", @class = "", @style = "width: auto" }))
            {
                ViewContext.Writer.Write("<div style='text-align:center'>");
                Html.DevExpress().Label(
                    labelSettings =>
                    {
                        labelSettings.Name = "errorLabel";
                        labelSettings.ControlStyle.CssClass = "errorMessage";
                        labelSettings.Text = "A popup window's header is displayed at the top of a window and can consist of the Header Image";
                        labelSettings.AssociatedControlName = "Total amount";
                    }
                )
                .Render();

                ViewContext.Writer.Write("<br/><br/>");

                @Html.DevExpress().Button(btnSettings =>
                {
                    btnSettings.Name = "btnErrorOk";
                    btnSettings.Width = 70;
                    btnSettings.Height = 20;
                    btnSettings.Text = "Ok";
                    btnSettings.ClientSideEvents.Click = "function(s, e){ pcErrorModalDialog.Hide(); }"; ;
                    btnSettings.UseSubmitBehavior = false;
                }).GetHtml();
                ViewContext.Writer.Write("</div>");
            };
        });

        settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer('pcErrorModalDialog', '', true); }";
    }).GetHtml()
</div>

@*Confirmation Popup*@
<div>
    @Html.DevExpress().PopupControl(
    settings =>
    {
        settings.Name = "pcConfirmModalDialog";
        settings.Width = 260;
        settings.MaxWidth = 350;
        settings.AllowDragging = true;
        settings.CloseAction = CloseAction.CloseButton;
        settings.CloseOnEscape = true;
        settings.PopupAnimationType = AnimationType.None;
        settings.HeaderText = "Delete";
        settings.ControlStyle.CssClass = "popupMessage";
        settings.Modal = true;
        settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
        settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;

        //settings.Styles.Header.BackColor = Color.FromArgb(0xFCFADD);

        settings.SetContent(() =>
        {
            using (Html.BeginForm("ConfirmModalView", "Home", FormMethod.Post, new { id = "confirmForm", @class = "", @style = "width: auto" }))
            {
                ViewContext.Writer.Write("<div style='text-align:center'>");
                Html.DevExpress().Label(
                    labelSettings =>
                    {
                        labelSettings.Name = "confirmMessage";
                        labelSettings.ControlStyle.CssClass = "";
                        labelSettings.Text = "";
                        labelSettings.AssociatedControlName = "Total amount";
                    }
                )
                .Render();

                ViewContext.Writer.Write("<br/><br/>");

                @Html.DevExpress().Button(btnSettings =>
                {
                    btnSettings.Name = "btnConfirmOk";
                    btnSettings.Width = 70;
                    btnSettings.Height = 20;
                    btnSettings.Text = "Ok";
                    btnSettings.ClientSideEvents.Click = "btnConfirmOkCancel"; ;
                    btnSettings.UseSubmitBehavior = false;
                }).GetHtml();

                ViewContext.Writer.Write("&nbsp;&nbsp;&nbsp;");

                @Html.DevExpress().Button(btnSettings =>
                {
                    btnSettings.Name = "btnConfirmCancel";
                    btnSettings.Width = 70;
                    btnSettings.Height = 20;
                    btnSettings.Text = "Cancel";
                    btnSettings.ClientSideEvents.Click = "btnConfirmOkCancel"; ;
                    btnSettings.UseSubmitBehavior = false;
                }).GetHtml();
                ViewContext.Writer.Write("</div>");
            };
        });

        settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer('pcConfirmModalDialog', '', true); }";
    }).GetHtml()
</div>

<div>
    @Html.DevExpress().LoadingPanel(
        settings =>
        {
            settings.Name = "loadingPanel";
            settings.Modal = false;
            settings.ContainerElementID = "";
        }
    ).GetHtml()
</div>

@section LeftPanelContent {
    @Html.Partial("LeftPanelPartial", Model)
}

@*@using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.Partial("RightPanelPartial")
    }*@

<div id="divRightPanelPartial">
    @Html.Partial("RightPanelPartial", Model)
</div>

@*Wouldn't go as part of BundleConfig.cs*@
<script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.3.3/proj4.js"></script>
<script src="Scripts/shp2geojson/jszip.js"></script>
<script src="Scripts/shp2geojson/jszip-utils.js"></script>
<script src="Scripts/shp2geojson/preprocess.js"></script>
<script src="Scripts/shp2geojson/preview.js"></script>

<script>
    var _appConfig;

    $(document).ready(function () {
        // init panel settings
        radioActivePanelSettingsClicked();
        radioLeftPanelSaveLoadClick();
    });
</script>

