@using Suhoh.Model
@model ViewModel

@{
    ViewBag.Title = "Home";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section LeftPanelContent {
    @Html.Partial("LeftPanelPartial")
}

<script>
    var _jsonData;

    window.addEventListener('resize', function (event) {
        console.log("window - innerWidth " + window.innerWidth + ", window - innerHeight " + window.innerHeight);
    })

    function splitterMainResized(s, e) {
        // Update Map
        _map.updateSize();

        // Update Graph
        if (_jsonData != null && _pieSvg != null) {
            // Tried to just update Svg - not working
            //var paneSize = getPaneSize('paneGraph');
            //_pieSvg.attr("width", paneSize.width).attr("height", paneSize.height);
            var pieData = getPieData('paneGraph', _jsonData, 'Applicant', 'Quantity_m3', false);
            drawPie('pieChart', pieData.pieData, pieData.width, pieData.height, pieData.min / 2);
        }

        // Update Gridview
        var pGridview = splitterMain.GetPaneByName('paneGridview');
        dxGridview.SetHeight(pGridview.GetClientHeight());
    }


    function getPaneSize(paneId) {
        var pGraph = splitterMain.GetPaneByName(paneId);
        var width = pGraph.GetClientWidth();
        var height = pGraph.GetClientHeight();
        return { width: width, height: height }
    }


    var ExcelToJSON = function () {
        this.parseExcel = function (file) {
            var reader = new FileReader();
            reader.onload = function (e) {
                var data = e.target.result;
                var workbook = XLSX.read(data, {
                    type: 'binary'
                });
                workbook.SheetNames.forEach(function (sheetName) {
                    _jsonData = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);   // array - _jsonData[0][column name]
                    var jsonData = JSON.stringify(_jsonData);   // [{'applicant':'aaa', 'project;:'bbbb'...}, { ...}]
                    var headerNames = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], { header: 1 })[0];

                    convertJsonToDataTable(jsonData);   // For Gridview
                })
            };
            reader.onerror = function (ex) {
                console.log(ex);
            };
            reader.readAsBinaryString(file);
        };
    };

    // Ajax: convert Json to DataTable and will show in Gridview
    function convertJsonToDataTable(json) {
        var url = "Home/ConvertJsonToDataTable"
        $.ajax({
            type: "POST",
            url: url,
            data: { 'json': json},
            dataType: "json",
            success: successFunc,
            error: errorFunc
        });

        function successFunc(data, status) {
            //addPointLayer(_jsonData, 'Latitude', 'Longitude');

            dxGridview.PerformCallback();

            var pieData = getPieData('paneGraph', _jsonData, 'Applicant', 'Quantity_m3', true);
            _pieSvg = drawPie('pieChart', pieData.pieData, pieData.width, pieData.height, pieData.min / 2);
        }
        function errorFunc() {
            alert("Error: ConvertJsonToDataTable");
        }
    }

    function loadExcelFile(evt) {
        var excelFile = document.createElement('input');
        excelFile.type = 'file';
        excelFile.accept = '.xls, .xlsx'
        excelFile.id = 'excelFile';

        document.body.appendChild(excelFile);

        $('input[type="file"]').change(function (e) {
            var fileName = e.target.files[0].name;
            var xl2json = new ExcelToJSON();
            xl2json.parseExcel(e.target.files[0]);

        });
        excelFile.click();
    }
</script>

<div style="width:100%;height:100%;position: relative;" id="MainContent">
    @*@Html.Raw(File.ReadAllText(Server.MapPath(@"~/App_Data/Overview.html")))*@

    @Html.DevExpress().Splitter(settings => {
        settings.Name = "splitterMain";
        //settings.Height = 800;  // no effect
        //settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);  // no effect
        settings.Orientation = Orientation.Vertical;
        settings.AllowResize = true;
        settings.SeparatorVisible = true;
        settings.FullscreenMode = true;
        settings.Panes.Add(panes => {
            panes.Panes.Add(mapPane =>
            {
                mapPane.Name = "paneMap";
                mapPane.SetContent(() =>
                {
                    Html.RenderPartial("OpenLayerMap", Model);
                });

            });
            panes.Panes.Add(graphPane =>
            {
                graphPane.Name = "paneGraph";
                graphPane.SetContent(() =>
                {
                    Html.RenderPartial("D3Graph", Model);
                });
            });
        });
        settings.Panes.Add(gridviewPane => {
            gridviewPane.Name = "paneGridview";
            gridviewPane.Size = Unit.Percentage(30);
            gridviewPane.SetContent(() => {
                Html.RenderAction("DxGridview", Model);
            });
        });
        settings.ClientSideEvents.PaneResized = "splitterMainResized";
    }).GetHtml()
</div>

@*Property popup*@
<div>
    @Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "popupPaneProperty";
            settings.Width = 250;
            settings.Height = 350;
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.CloseButton;
            settings.CloseOnEscape = true;
            settings.PopupAnimationType = AnimationType.None;
            settings.HeaderText = "Property";


            settings.ShowPinButton = true;
            settings.ShowCloseButton = true;
            settings.ShowCollapseButton = true;

            settings.Modal = false;

            settings.PopupAnimationType = AnimationType.Slide;

            settings.ResizingMode = ResizingMode.Live;
            settings.AllowResize = true;
            settings.ShowSizeGrip = ShowSizeGrip.True;
            settings.ShowFooter = false;

            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
            settings.SetContent(() =>
            {
                Html.RenderPartial("D3GraphProperty", Model);
            });

            //settings.ClientSideEvents.BeforeResizing = "function(s,e){ MainGridView.SetHeight(1); pageControlGrid.SetVisible(false); }";
            //settings.ClientSideEvents.AfterResizing = "function(s, e){ pageControlGrid.SetVisible(true); MainGridView.SetHeight(document.getElementById('containerDiv').clientHeight);}";

            settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer('popupPaneProperty', '', true); }";
        }).GetHtml()
</div>
