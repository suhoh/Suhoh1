@using Suhoh.Model
@model ViewModel

@{
    ViewBag.Title = "Home";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section LeftPanelContent {
    @Html.Partial("LeftPanelPartial")
}

<script>
    var _headerHeight = 0;
    var _isD3Label = false;
    var _pieData = [{ "Quantity": 1534864, "Project": "a" }, { "Quantity": 125494, "Project": "b" }, { "Quantity": 10000000, "Project": "c" }]
    var _jsonData;

    window.addEventListener('resize', function (event) {
        console.log("window - innerWidth " + window.innerWidth + ", window - innerHeight " + window.innerHeight);
    })

    function splitterMainResized(s, e) {
        _map.updateSize();

        var pGraph = splitterMain.GetPaneByName('paneGraph');
        var width = pGraph.GetClientWidth();
        var height = pGraph.GetClientHeight();
        var min = Math.min(width, height);

        if (_jsonData != null)
            drawPie('pieChart', _jsonData, "Applicant", "Quantity_m3", width, height, min/2);

        var pGridview = splitterMain.GetPaneByName('paneGridview');
        dxGridview.SetHeight(pGridview.GetClientHeight() - _headerHeight);
    }

    var ExcelToJSON = function () {
        this.parseExcel = function (file) {
            var reader = new FileReader();

            reader.onload = function (e) {
                var data = e.target.result;
                var workbook = XLSX.read(data, {
                    type: 'binary'
                });
                workbook.SheetNames.forEach(function (sheetName) {
                    _jsonData = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);
                    var jsonData = JSON.stringify(_jsonData);
                    //var headerNames = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], { header: 1 })[0];
                    //var jsonData = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]);
                    convertJsonToDataTable(jsonData);
                    console.log(JSON.parse(jsonData));
                })
            };
            reader.onerror = function (ex) {
                console.log(ex);
            };
            reader.readAsBinaryString(file);
        };
    };

    // Ajax: convert Json to DataTable and will show in Gridview
    function convertJsonToDataTable(json) {
        var url = "Home/ConvertJsonToDataTable"
        $.ajax({
            type: "POST",
            url: url,
            data: { 'json': json},
            dataType: "json",
            success: successFunc,
            error: errorFunc
        });

        function successFunc(data, status) {
            dxGridview.PerformCallback();

            var pGraph = splitterMain.GetPaneByName('paneGraph');
            var width = pGraph.GetClientWidth();
            var height = pGraph.GetClientHeight();
            var min = Math.min(width, height);
            drawPie('pieChart', _jsonData, "Applicant", "Quantity_m3", width, height, min / 2);
        }
        function errorFunc() {
            alert("Error: ConvertJsonToDataTable");
        }

    }

    function loadExcelFile(evt) {
        var excelFile = document.createElement('input');
        excelFile.type = 'file';
        excelFile.accept = '.xls, .xlsx'
        excelFile.id = 'excelFile';

        document.body.appendChild(excelFile);

        $('input[type="file"]').change(function (e) {
            var fileName = e.target.files[0].name;
            var xl2json = new ExcelToJSON();
            xl2json.parseExcel(e.target.files[0]);

        });
        excelFile.click();
    }
</script>

<div style="width:100%;height:100%;position: relative;" id="MainContent">
    @*@Html.Raw(File.ReadAllText(Server.MapPath(@"~/App_Data/Overview.html")))*@

    @Html.DevExpress().Splitter(settings => {
        settings.Name = "splitterMain";
        //settings.Height = 800;  // no effect
        //settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);  // no effect
        settings.Orientation = Orientation.Vertical;
        settings.AllowResize = true;
        settings.SeparatorVisible = true;
        settings.FullscreenMode = true;
        settings.Panes.Add(panes => {
            panes.Panes.Add(mapPane =>
            {
                mapPane.Name = "paneMap";
                mapPane.SetContent(() =>
                {
                    Html.RenderPartial("OpenLayerMap", Model);
                });

            });
            panes.Panes.Add(graphPane =>
            {
                graphPane.Name = "paneGraph";
                graphPane.SetContent(() =>
                {
                    Html.RenderPartial("D3Graph", Model);
                });
            });
        });
        settings.Panes.Add(gridviewPane => {
            gridviewPane.Name = "paneGridview";
            gridviewPane.Size = Unit.Percentage(30);
            gridviewPane.SetContent(() => {
                Html.RenderAction("DxGridview", Model);
            });
        });
        settings.ClientSideEvents.PaneResized = "splitterMainResized";
    }).GetHtml()
</div>