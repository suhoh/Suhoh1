@using Suhoh.Model
@model ViewModel

<div id="divLineTitle" class="divLineTitle">
    <table>
        <tr>
            <th id="thLineTitleHeading1" class="thLineTitleHeading1">Title</th>
        </tr>
        <tr>
            <th>
                @Html.DevExpress().TextBoxFor(model => model.LineTitle,
                          settings =>
                          {
                              settings.Name = "tbPropertyLineTitle";
                              settings.Width = 240;
                              settings.Text = "Graph Title";
                              settings.ControlStyle.CssClass = "D3LineTitlePropertyBox";
                              settings.Properties.ClientSideEvents.KeyUp = "tbLinePropertyTitleKeyUp";
                          }
                          ).GetHtml()
            </th>
        </tr>
    </table>
</div>

<div id="divLineLabel" class="divLineLabel">
    <table>
        <tr>
            <th id="thLineLabelHeading1" class="thLineLabelHeading1">
                Label
            </th>
        </tr>
        <tr>
            <th id="thLineXValueChkBox" class="thLineXValueChkBox">
                @Html.DevExpress().CheckBoxFor(settings => Model.CbLineXValueLabel,
                    settings =>
                    {
                        settings.Name = "chkLineXValueLabel";
                        settings.Text = "X Value";
                        settings.Properties.ClientSideEvents.CheckedChanged = "chkLineLabelClicked";
                    }).GetHtml()
            </th>
            <th id="thLineYValueChkBox" class="thLineYValueChkBox">
                @Html.DevExpress().CheckBoxFor(settings => Model.CbLineYValueLabel,
                    settings =>
                    {
                        settings.Name = "chkLineYValueLabel";
                        settings.Text = "Y Value";
                        settings.Properties.ClientSideEvents.CheckedChanged = "chkLineLabelClicked";
                    }).GetHtml()
            </th>
        </tr>
    </table>
</div>

<div id="divLineXYColumn" class="divLineXYColumn">
    <table>
        <tr>
            <th id="thLineXYColumnHeading1" class="thLineXYColumnHeading1">
                XY Columns
            </th>
        </tr>
        <tr>
            <th id="thLineXColumnDropDownLabel" class="thLineXColumnDropDownLabel">
                X Column
            </th>
            <th id="thLineXColumnDropDown" class="thLineXColumnDropDown">
                @Html.DevExpress().ComboBoxFor(model => model.DdLineXColumn,
                settings =>
                {
                    settings.Name = "cbLineXColumn";
                    settings.Width = 167;
                    settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                    settings.Properties.DropDownWidth = 165;
                    settings.Properties.ClientSideEvents.SelectedIndexChanged = "cbLineXYColumnChanged";
                }).BindList(DataEngine.GetXColumn()).GetHtml()
            </th>
        </tr>
        <tr>
            <th id="thLineYColumnDropDownLabel" class="thLineYColumnDropDownLabel">
                Y Column
            </th>
            <th id="thLineYColumnDropDown" class="thLineYColumnDropDown">
                @Html.DevExpress().DropDownEdit(settings =>
                {
                settings.Name = "ddLineYColumn";
                settings.Width = 167;

                    settings.SetDropDownWindowTemplateContent(c =>
                    {
                        @Html.DevExpress().ListBox(listBoxSettings =>
                        {
                            listBoxSettings.Name = "lbLineYColumn";
                            listBoxSettings.Width = 164;
                            listBoxSettings.Height = 180;
                            listBoxSettings.Properties.EnableSelectAll = true;
                            listBoxSettings.Properties.FilteringSettings.ShowSearchUI = true;
                            listBoxSettings.Properties.SelectionMode = ListEditSelectionMode.CheckColumn;
                            listBoxSettings.Properties.Items.Add("Quantity_m3", "0").Selected = true;
                            listBoxSettings.Properties.Items.Add("Consumptive Use_M3", "1");
                            listBoxSettings.Properties.Items.Add("Pump Rate", "2");

                            listBoxSettings.Properties.ClientSideEvents.SelectedIndexChanged = "cbLineXYColumnChanged";
                            //listBoxSettings.Properties.ClientSideEvents.Init = "cbBarXYColumnChanged";
                        }).Render();
                        ViewContext.Writer.Write("<div style=\"margin: 6px; overflow: hidden;\">");
                        Html.DevExpress().Button(buttonSetting =>
                        {
                            buttonSetting.Name = "lbLineButtonClose";
                            buttonSetting.Text = "Close";
                            buttonSetting.Style.Add("float", "right");
                            buttonSetting.ClientSideEvents.Click = "function(s, e) { ddLineYColumn.HideDropDown(); }";
                            buttonSetting.Height = 26;
                        }).Render();
                        ViewContext.Writer.Write("</div>");
                    });
                }).GetHtml()
            </th>
        </tr>
    </table>
</div>

<div id="divLineShape" class="divLineShape">
    <table>
        <tr>
            <th id="thLineShapeHeading1" class="thLineShapeHeading1">
                Line Shape
            </th>
        </tr>
        <tr>
            <th id="thLineShapeRadio" class="thLineShapeRadio">
                @Html.DevExpress().RadioButtonListFor(model => Model.RadioLineShape,
                settings =>
                {
                    settings.Name = "radioLineShape";
                    settings.Properties.RepeatDirection = System.Web.UI.WebControls.RepeatDirection.Horizontal;
                    settings.Properties.Items.Add("Linear", 1);
                    settings.Properties.Items.Add("Spline", 2);
                    settings.Properties.Items.Add("Monotonic", 3);
                    settings.Properties.RepeatColumns = 3;
                    settings.Width = 200;
                    settings.Height = 28;
                    settings.ControlStyle.CssClass = "radioLineShape";
                    settings.ControlStyle.Border.BorderStyle = System.Web.UI.WebControls.BorderStyle.None;
                    settings.Properties.ValueType = typeof(Int32);
                    settings.Properties.ClientSideEvents.SelectedIndexChanged = "radioLineShapeClicked";
                }).GetHtml()
            </th>
        </tr>
    </table>
</div>

<div>
    @Html.Partial("CallbackLineColorPickers", Model)
</div>