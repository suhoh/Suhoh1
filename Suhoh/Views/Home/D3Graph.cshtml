@using Suhoh.Model
@model ViewModel

@{
    ViewBag.Title = "D3Graph";
}

@*<h2>D3Graph</h2>*@
<div id="pieChart"></div>
@*<div class="divChartSettingButton">
        @Html.DevExpress().Button(settings =>
        {
            settings.Name = "btnChartSetting";
            settings.Text = "";
            settings.Width = 10;
            settings.Height = 10;
            settings.UseSubmitBehavior = false;
            settings.ToolTip = "Setting";
            settings.ControlStyle.CssClass = "btnChartSetting";
            settings.ClientSideEvents.Click = "panelSlideChartSetting";

            settings.Images.Image.IconID = IconID.IconbuilderActionsSettingsSvgWhite16x16;

        }).GetHtml()
    </div>*@
<div class="divChartMaximizeButton">
    <button type="button" class="btnChartMaximize">M</button>
</div>
<div class="divChartLegendButton">
    <button type="button" class="btnChartLegend" onclick="showHideLegend()">L</button>
</div>
<div class="divChartPropertyButton">
    <button type="button" class="btnChartProperty">P</button>
</div>
<div class="divChartSettingButton">
    <button type="button" class="btnChartClose">C</button>
</div>
@* This file will contain events that relates to D3
    Specific functions will be stored under Scripts/D3 folder with separate file names
    - createScatterPlot
    - createBar, createPie, etc... *@

<script type="text/javascript">

    const _colorScale = d3.interpolateRdYlBu;

    const _colorRangeInfo = {
        colorStart: 0,
        colorEnd: 1,
        useEndAsStart: false,
    };

    //drawPie('pieChart', _pieData, 400, 400, 180, _isLabel);
    
    function showHideLegend() {
        if (_isD3Label == false)
            _isD3Label = true;
        else
            _isD3Label = false;

        var pGraph = splitterMain.GetPaneByName('paneGraph');
        var width = pGraph.GetClientWidth();
        var height = pGraph.GetClientHeight();
        var min = Math.min(width, height);
        drawPie('pieChart', _jsonData, "Applicant", "Quantity_m3", width, height, min / 2);
    }

    function calculatePoint(i, intervalSize, colorRangeInfo) {
        var { colorStart, colorEnd, useEndAsStart } = colorRangeInfo;
        return (useEndAsStart
            ? (colorEnd - (i * intervalSize))
            : (colorStart + (i * intervalSize)));
    }

    function interpolateColors(dataLength, colorScale, colorRangeInfo) {
        var { colorStart, colorEnd } = colorRangeInfo;
        var colorRange = colorEnd - colorStart;
        var intervalSize = colorRange / dataLength;
        var i, colorPoint;
        var colorArray = [];

        for (i = 0; i < dataLength; i++) {
            colorPoint = calculatePoint(i, intervalSize, colorRangeInfo);
            colorArray.push(colorScale(colorPoint));
        }

        return colorArray;
    }

</script>

