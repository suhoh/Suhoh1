@using Suhoh.Model
@model ViewModel

@{
    ViewBag.Title = "D3Graph";
}

@*<h2>D3Graph</h2>*@
<div id="pieChart"></div>

<div class="divChartMaximizeButton">
    <button type="button" class="btnChartMaximize" title="Maximize" ></button>
</div>
<div class="divChartLegendButton">
    <button type="button" class="btnChartLegend" title="Legend" onclick="showHideLegend()">L</button>
</div>
<div class="divChartPropertyButton">
    <button type="button" class="btnChartProperty" title="Property" onclick="showPropertyPopup()">P</button>
</div>
<div class="divChartSettingButton">
    <button type="button" class="btnChartClose" title="Close" >C</button>
</div>
@* This file will contain events that relates to D3
    Specific functions will be stored under Scripts/D3 folder with separate file names
    - createScatterPlot
    - createBar, createPie, etc... *@

<script type="text/javascript">

    const _colorScale = d3.interpolateRdYlBu;

    const _colorRangeInfo = {
        colorStart: 0,
        colorEnd: 1,
        useEndAsStart: false,
    };
  
    function showHideLegend() {
        if (_isD3Label == false)
            _isD3Label = true;
        else
            _isD3Label = false;

        var pieData = getPieData('paneGraph', _jsonData, 'Applicant', 'Quantity_m3', false);
        drawPie('pieChart', pieData.pieData, pieData.width, pieData.height, pieData.min / 2);
    }

    function showPropertyPopup() {
        popupPaneProperty.Show();
    }

    function getPieData(paneId, jsonData, xCol, yCol, isInitial) {
        if (jsonData == null)
            return null;

        var pGraph = splitterMain.GetPaneByName(paneId);
        var width = pGraph.GetClientWidth();
        var height = pGraph.GetClientHeight();
        var min = Math.min(width, height);

        var xyArray = [];
        if (!isInitial)
            xyArray = _pieData;
        else {
            for (i = 0; i < jsonData.length; i++) 
                xyArray.push({ "X": jsonData[i][xCol], "Y": jsonData[i][yCol] });
        }

        return { pieData: xyArray, width: width, height: height, min: min }
    }

    function calculatePoint(i, intervalSize, colorRangeInfo) {
        var { colorStart, colorEnd, useEndAsStart } = colorRangeInfo;
        return (useEndAsStart
            ? (colorEnd - (i * intervalSize))
            : (colorStart + (i * intervalSize)));
    }

    function interpolateColors(dataLength, colorScale, colorRangeInfo) {
        var { colorStart, colorEnd } = colorRangeInfo;
        var colorRange = colorEnd - colorStart;
        var intervalSize = colorRange / dataLength;
        var i, colorPoint;
        var colorArray = [];

        for (i = 0; i < dataLength; i++) {
            colorPoint = calculatePoint(i, intervalSize, colorRangeInfo);
            colorArray.push(colorScale(colorPoint));
        }

        return colorArray;
    }

</script>

