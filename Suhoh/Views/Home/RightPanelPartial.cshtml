@using Suhoh.Model
@model ViewModel

@*@Html.Raw(File.ReadAllText(Server.MapPath(@"~/App_Data/Overview.html")))*@

@Html.DevExpress().Panel(
    pSettings =>
    {
        pSettings.Name = "mainPanel";
        //pSettings.FixedPosition = PanelFixedPosition.WindowRight;
        pSettings.Collapsible = false;
        //pSettings.SettingsAdaptivity.CollapseAtWindowInnerWidth = 960;
        pSettings.Width = Unit.Percentage(100);
        pSettings.SetContent(() =>
        {
            @Html.DevExpress().Splitter(settings =>
            {
                settings.Name = "splitterMain";
                settings.ShowCollapseBackwardButton = true;
                settings.ShowCollapseForwardButton = true;
                settings.ShowSeparatorImage = true;
                settings.Orientation = Orientation.Vertical;
                settings.AllowResize = true;
                settings.SeparatorVisible = true;
                settings.FullscreenMode = true;

                settings.ClientSideEvents.PaneResized = "splitterMainResized";

                //settings.ControlStyle.CssClass = "rightPanelPartial";

                // 1 or 2 panels
                if (Model.ActivePanelSettings <= 2)
                {
                    settings.Orientation = Orientation.Horizontal;
                    foreach (var mp in Model.MainPanels)
                    {
                        settings.Panes.Add(panel1 =>
                        {
                            string mainName = mp.Name;
                            panel1.Name = mainName;
                            foreach (var type in mp.Type)
                            {
                                panel1.Panes.Add(pane =>
                                {
                                    pane.Name = mainName + type;    // Panel1Map1
                                    pane.SetContent(() =>
                                    {
                                        RenderMyPartial(pane.Name, type);
                                    });
                                });
                            }
                        });
                    }
                }
                // 3 or 4 panels
                if (Model.ActivePanelSettings >= 3 && Model.ActivePanelSettings <= 4)
                {
                    settings.Orientation = Orientation.Vertical;
                    settings.Panes.Add(panel1 =>
                    {
                        for (int i = 0; i < 2; i++)     // panel 1 and 2
                        {
                            string mainName = Model.MainPanels[i].Name;
                            panel1.Name = mainName;
                            foreach (var type in Model.MainPanels[i].Type)
                            {
                                panel1.Panes.Add(pane =>
                                {
                                    pane.Name = mainName + type;    // Panel1Map1
                                    pane.SetContent(() =>
                                    {
                                        RenderMyPartial(pane.Name, type);
                                    });

                                });
                            }
                        }
                    });

                    settings.Panes.Add(panel2 =>
                    {
                        for (int i = 2; i < Model.MainPanels.Count; i++)    // panel 3 and 4
                        {
                            string mainName = Model.MainPanels[i].Name;
                            panel2.Name = mainName;
                            foreach (var type in Model.MainPanels[i].Type)
                            {
                                panel2.Panes.Add(pane =>
                                {
                                    pane.Name = mainName + type;    // Panel1Map1
                                    pane.SetContent(() =>
                                    {
                                        RenderMyPartial(pane.Name, type);
                                    });

                                });
                            };
                        };
                    });
                };
            }).GetHtml();
        });
    }).GetHtml()

@functions
{
    void RenderMyPartial(string paneName, string type)
    {
        Model.CreatePanelName = paneName;
        if (type.ToUpper().Contains("PIE") || type.ToUpper().Contains("BAR") || type.ToUpper().Contains("LINE") || type.ToUpper().Contains("SCATTER"))
            Html.RenderPartial("D3Graph", Model);
        else if (type.ToUpper().Contains("MAP"))
            Html.RenderPartial("OLMap", Model);
        else if (type.ToUpper().Contains("GRIDVIEW"))
        {
            // Toolbar buttons - Maximize, property, legend...
            ViewContext.Writer.Write("<div id='@Model.CreatePanelName' style='position:relative;'>");
            ViewContext.Writer.Write("<div class='divGridviewTitle' id='" + (String.Format("{0}_Title", Model.CreatePanelName)) + "' ><span style='font-size: large;'>GRID</span></div>");

            ViewContext.Writer.Write("<div id='" + (String.Format("{0}_Tools", Model.CreatePanelName)) + "' ><span style='text-align:right;'>");
            // Header filter, Grouping checkbox
            Html.DevExpress().CheckBox(cbsettings =>
            {
                cbsettings.Name = String.Format("{0}_HeaderFilter", Model.CreatePanelName);
                cbsettings.Text = "Header Filter";
                cbsettings.ControlStyle.CssClass = "divGridviewHeaderFilter";
                cbsettings.Properties.ClientSideEvents.CheckedChanged = "chkHeaderFilterGroupingChecked";
            }).GetHtml();
            // Grouping
            Html.DevExpress().CheckBox(cbsettings =>
            {
                cbsettings.Name = String.Format("{0}_Grouping", Model.CreatePanelName);
                cbsettings.Text = "Grouping";
                cbsettings.ControlStyle.CssClass = "divGridviewGrouping";
                cbsettings.Properties.ClientSideEvents.CheckedChanged = "chkHeaderFilterGroupingChecked";
            }).GetHtml();
            ViewContext.Writer.Write("</span></div>");

            // Toolbars
            ViewContext.Writer.Write("<div class='divGridviewReset'>");
            ViewContext.Writer.Write("<button id='" + (String.Format("{0}_Reset", Model.CreatePanelName)) + "' type='button' class='btnGridviewReset' title='Reset' " +
            "onclick='btnGridviewResetClick(this)'>A</button>");
            ViewContext.Writer.Write("</div>");

            ViewContext.Writer.Write("<div class='divGridviewMaximize'>");
            ViewContext.Writer.Write("<button id='" + (String.Format("{0}_Maximize", Model.CreatePanelName)) + "' type='button' class='btnGridviewMaximize' title='Maximize' " +
                "onclick='btnGridviewMaximizeClick(this)'></button>");
            ViewContext.Writer.Write("</div>");

            ViewContext.Writer.Write("<div class='divGridviewLegend'>");
            ViewContext.Writer.Write("<button id='" + (String.Format("{0}_Legend", Model.CreatePanelName)) + "' type='button' class='btnGridviewLegend' title='Legend' " +
                "onclick='btnGridviewLegendClick(this)'></button>");
            ViewContext.Writer.Write("</div>");

            ViewContext.Writer.Write("<div class='divGridviewProperty'>");
            ViewContext.Writer.Write("<button id='" + (String.Format("{0}_Property", Model.CreatePanelName)) + "' type='button' class='btnGridviewProperty' title='Property' " +
                "onclick='showPropertyPopup(this)'></button>");
            ViewContext.Writer.Write("</div>");

            ViewContext.Writer.Write("<div class='divGridviewSetting'>");
            ViewContext.Writer.Write("<button id='" + (String.Format("{0}_Close", Model.CreatePanelName)) + "' type='button' class='btnGridviewClose' title='Close' " +
                "onclick='btnGridviewCloseClick(this)'></button>");
            ViewContext.Writer.Write("</div>");

            ViewContext.Writer.Write("</div>");

            ViewContext.Writer.Write("<div id='test999'>");
            Html.RenderPartial("DxGridview", Model);
            ViewContext.Writer.Write("</div>");
        }

        //ViewContext.Writer.Write("<h1>" + paneName + "</h1>");
    }
}

@*<script>

</script>*@